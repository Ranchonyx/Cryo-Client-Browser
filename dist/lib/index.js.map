{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/Common/AckTracker/AckTracker.ts", "../../src/Common/CryoBuffer/CryoBuffer.ts", "../../src/Common/CryoBinaryMessage/CryoBinaryMessageFormatterFactory.ts", "../../src/Common/CryoFrameInspector/CryoFrameInspector.ts", "../../src/Common/Util/CreateDebugLogger.ts", "../../src/Common/Util/Guard.ts", "../../src/Common/CryoEventEmitter/CryoEventEmitter.ts", "../../src/CryoClientWebsocketSession/CryoClientWebsocketSession.ts"],
  "sourcesContent": ["import {CryoClientWebsocketSession} from \"./CryoClientWebsocketSession/CryoClientWebsocketSession.js\";\n\n/**\n * Create a Cryo client and connect it to a Cryo server\n * @param host - Where the Cryo server is located\n * @param bearer - Your Cryo authentication token\n * @param timeout - How long to wait until disconnecting\n * */\nexport async function cryo(host: string, bearer: string, timeout: number = 5000) {\n    return CryoClientWebsocketSession.Connect(host, bearer, timeout)\n}\n", "import {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\ntype PendingBinaryMessage = {\n    timestamp: number;\n    message: CryoBuffer;\n    payload?: string | CryoBuffer;\n}\n\nexport class AckTracker {\n    private pending = new Map<number, PendingBinaryMessage>();\n\n    public Track(ack: number, message: PendingBinaryMessage) {\n        this.pending.set(ack, message);\n    }\n\n    public Confirm(ack: number): PendingBinaryMessage | null {\n        const maybe_ack = this.pending.get(ack);\n        if (!maybe_ack)\n            return null;\n\n        this.pending.delete(ack);\n        return maybe_ack;\n    }\n\n    public Has(ack: number): boolean {\n        return this.pending.has(ack);\n    }\n}\n", "export class CryoBuffer {\n    private view: DataView;\n\n    public constructor(public buffer: Uint8Array) {\n        this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n\n    public static alloc(length: number): CryoBuffer {\n        return new CryoBuffer(new Uint8Array(length));\n    }\n\n    public static from(input: string, encoding: \"utf8\" | \"hex\"): CryoBuffer {\n        if (encoding === \"utf8\")\n            return new CryoBuffer(new TextEncoder().encode(input));\n\n        const data = new Uint8Array(input.length / 2);\n        for (let i = 0; i < data.length; i++)\n            data[i] = parseInt(input.substring(i * 2, i * 2 + 2), 16);\n\n        return new CryoBuffer(data);\n    }\n\n    public writeUInt32BE(value: number, offset: number): void {\n        this.view.setUint32(offset, value);\n    }\n\n    public writeUInt8(value: number, offset: number): void {\n        this.view.setUint8(offset, value);\n    }\n\n    public readUInt32BE(offset: number): number {\n        return this.view.getUint32(offset);\n    }\n\n    public readUInt8(offset: number): number {\n        return this.view.getUint8(offset);\n    }\n\n    public write(text: string, offset: number = 0): void {\n        this.buffer.set(new TextEncoder().encode(text), offset);\n    }\n\n    public set(buffer: CryoBuffer, offset: number): void {\n        this.buffer.set(buffer.buffer, offset);\n    }\n\n    public toString(encoding: \"utf8\" | \"hex\"): string {\n        if (encoding === \"utf8\")\n            return new TextDecoder().decode(this.buffer);\n\n        return [...this.buffer]\n            .map(byte => byte.toString(16).padStart(2, \"0\"))\n            .join(\"\");\n    }\n\n    public subarray(start: number, end?: number):  CryoBuffer {\n        return new CryoBuffer(this.buffer.subarray(start, end));\n    }\n\n    public copy(target: CryoBuffer, target_start = 0): void {\n        target.buffer.set(this.buffer, target_start);\n    }\n\n    public get length(): number {\n        return this.buffer.byteLength;\n    }\n}\n", "import {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\nexport enum BinaryMessageType {\n    UTF8DATA,\n    ACK,\n    PING_PONG,\n    ERROR,\n    BINARYDATA\n}\n\ntype BinaryMessage<T, U extends BinaryMessageType> = {\n    sid: UUID;\n    type: U;\n} & T;\n\ntype AckMessage = BinaryMessage<{\n    ack: number;\n}, BinaryMessageType.ACK>;\n\ntype PingMessage = BinaryMessage<{\n    ack: number;\n    payload: \"ping\" | \"pong\";\n}, BinaryMessageType.PING_PONG>;\n\ntype UTF8DataMessage = BinaryMessage<{\n    ack: number;\n    payload: string;\n}, BinaryMessageType.UTF8DATA>;\n\ntype BinaryDataMessage = BinaryMessage<{\n    ack: number;\n    payload: CryoBuffer;\n}, BinaryMessageType.BINARYDATA>;\n\ntype ErrorMessage = BinaryMessage<{\n    ack: number;\n    payload: \"invalid_operation\" | \"session_expired\" | \"error\";\n}, BinaryMessageType.ERROR>;\n\ntype CryoAllBinaryMessage = AckMessage | PingMessage | UTF8DataMessage | ErrorMessage | BinaryDataMessage;\n\ninterface CryoBinaryMessageFormatter<T extends CryoAllBinaryMessage> {\n    Deserialize(value: CryoBuffer): T;\n\n    Serialize(sid: UUID, ack: number, payload: string | CryoBuffer | null): CryoBuffer;\n}\n\nclass CryoBufferUtil {\n    public static sidFromCryoBuffer(CryoBuffer: CryoBuffer): UUID {\n        const uuidv4_p1 = CryoBuffer.subarray(0, 4).toString(\"hex\");\n        const uuidv4_p2 = CryoBuffer.subarray(4, 6).toString(\"hex\");\n        const uuidv4_p3 = CryoBuffer.subarray(6, 8).toString(\"hex\");\n        const uuidv4_p4 = CryoBuffer.subarray(8, 10).toString(\"hex\");\n        const uuidv4_p5 = CryoBuffer.subarray(10, 16).toString(\"hex\");\n\n        return [uuidv4_p1, uuidv4_p2, uuidv4_p3, uuidv4_p4, uuidv4_p5].join(\"-\") as UUID;\n    }\n\n    public static sidToCryoBuffer(sid: UUID): CryoBuffer {\n        return CryoBuffer.from(sid.replaceAll(\"-\", \"\"), 'hex');\n    }\n}\n\nclass AckMessageFormatter implements CryoBinaryMessageFormatter<AckMessage> {\n    public Deserialize(value: CryoBuffer): AckMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        if (type !== BinaryMessageType.ACK)\n            throw new Error(\"Attempt to deserialize a non-ack binary message!\");\n\n        return {\n            sid,\n            ack,\n            type\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    public Serialize(sid: UUID, ack: number, payload: string | CryoBuffer | null = null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.ACK, 20);\n        return msg_buf;\n    }\n}\n\nclass PingPongMessageFormatter implements CryoBinaryMessageFormatter<PingMessage> {\n    public Deserialize(value: CryoBuffer): PingMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\");\n        if (type !== BinaryMessageType.PING_PONG)\n            throw new Error(\"Attempt to deserialize a non-ping_pong binary message!\");\n\n        if (!(payload === \"ping\" || payload === \"pong\"))\n            throw new Error(`Invalid payload ${payload} in ping_pong binary message!`);\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: \"ping\" | \"pong\"): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + 4);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.PING_PONG, 20);\n        msg_buf.write(payload, 21);\n\n        return msg_buf;\n    }\n}\n\nclass UTF8DataMessageFormatter implements CryoBinaryMessageFormatter<UTF8DataMessage> {\n    public Deserialize(value: CryoBuffer): UTF8DataMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\");\n\n        if (type !== BinaryMessageType.UTF8DATA)\n            throw new Error(\"Attempt to deserialize a non-data binary message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: string | null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + (payload?.length || 4));\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.UTF8DATA, 20);\n        msg_buf.write(payload || \"null\", 21);\n\n        return msg_buf;\n    }\n}\n\nclass BinaryDataMessageFormatter implements CryoBinaryMessageFormatter<BinaryDataMessage> {\n    public Deserialize(value: CryoBuffer): BinaryDataMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21);\n\n        if (type !== BinaryMessageType.BINARYDATA)\n            throw new Error(\"Attempt to deserialize a non-data binary message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: CryoBuffer | null): CryoBuffer {\n        const payload_length = payload ? payload.length : 4;\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + payload_length);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.UTF8DATA, 20);\n        msg_buf.set(payload || CryoBuffer.from(\"null\", \"utf8\"), 21);\n\n        return msg_buf;\n    }\n}\n\nclass ErrorMessageFormatter implements CryoBinaryMessageFormatter<ErrorMessage> {\n    public Deserialize(value: CryoBuffer): ErrorMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\") as ErrorMessage[\"payload\"];\n\n        if (type !== BinaryMessageType.ERROR)\n            throw new Error(\"Attempt to deserialize a non-error message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: ErrorMessage[\"payload\"] | null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + (payload?.length || 13));\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.ERROR, 20);\n        msg_buf.write(payload || \"unknown_error\", 21);\n\n        return msg_buf;\n    }\n}\n\nexport default class CryoBinaryMessageFormatterFactory {\n    public static GetFormatter(type: \"utf8data\"): UTF8DataMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.UTF8DATA): UTF8DataMessageFormatter;\n\n    public static GetFormatter(type: \"ping_pong\"): PingPongMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.PING_PONG): PingPongMessageFormatter;\n\n    public static GetFormatter(type: \"ack\"): AckMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.ACK): AckMessageFormatter;\n\n    public static GetFormatter(type: \"error\"): ErrorMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.ERROR): ErrorMessageFormatter;\n\n    public static GetFormatter(type: \"binarydata\"): BinaryDataMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.BINARYDATA): BinaryDataMessageFormatter;\n\n    public static GetFormatter(type: \"utf8data\" | \"ping_pong\" | \"ack\" | \"error\" | \"binarydata\"): CryoBinaryMessageFormatter<any>;\n    public static GetFormatter(type: BinaryMessageType.UTF8DATA | BinaryMessageType.PING_PONG | BinaryMessageType.ACK | BinaryMessageType.ERROR | BinaryMessageType.BINARYDATA): CryoBinaryMessageFormatter<any>;\n    public static GetFormatter(type: string | BinaryMessageType): CryoBinaryMessageFormatter<CryoAllBinaryMessage> {\n        switch (type) {\n            case \"utf8data\":\n            case BinaryMessageType.UTF8DATA:\n                return new UTF8DataMessageFormatter();\n            case \"error\":\n            case BinaryMessageType.ERROR:\n                return new ErrorMessageFormatter();\n            case \"ack\":\n            case BinaryMessageType.ACK:\n                return new AckMessageFormatter();\n            case \"ping_pong\":\n            case BinaryMessageType.PING_PONG:\n                return new PingPongMessageFormatter();\n            case \"binarydata\":\n            case BinaryMessageType.BINARYDATA:\n                return new BinaryDataMessageFormatter();\n            default:\n                throw new Error(`Binary message format for type '${type}' is not supported!`)\n        }\n    }\n\n    public static GetType(message: CryoBuffer): BinaryMessageType {\n        const type = message.readUInt8(20);\n        if (type > BinaryMessageType.ERROR)\n            throw new Error(`Unable to decode type from message ${message}. MAX_TYPE = 3, got ${type} !`);\n\n        return type;\n    }\n\n    public static GetAck(message: CryoBuffer): number {\n        return message.readUInt32BE(16);\n    }\n\n    public static GetSid(message: CryoBuffer): UUID {\n        return CryoBufferUtil.sidFromCryoBuffer(message);\n    }\n\n    public static GetPayload(message: CryoBuffer, encoding: \"utf8\" | \"hex\"): string {\n        return message.subarray(21).toString(encoding);\n    }\n}\n", "import CryoBinaryMessageFormatterFactory from \"../CryoBinaryMessage/CryoBinaryMessageFormatterFactory.js\";\nimport {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\nconst typeToStringMap = {\n    0: \"utf8data\",\n    1: \"ack\",\n    2: \"ping/pong\",\n    3: \"error\",\n    4: \"binarydata\"\n}\n\nexport class CryoFrameInspector {\n    public static Inspect(message: CryoBuffer, encoding: \"utf8\" | \"hex\" = \"utf8\"): string {\n        const sid = CryoBinaryMessageFormatterFactory.GetSid(message);\n        const ack = CryoBinaryMessageFormatterFactory.GetAck(message);\n        const type = CryoBinaryMessageFormatterFactory.GetType(message);\n        const type_str = typeToStringMap[type] || \"unknown\";\n\n        const payload = CryoBinaryMessageFormatterFactory.GetPayload(message, encoding);\n\n        return `[${sid},${ack},${type_str},[${payload}]]`\n    }\n}\n", "export type DebugLoggerFunction = (msg: string, ...params: unknown[]) => void;\n\nexport function CreateDebugLogger(section: string): DebugLoggerFunction {\n    if (localStorage.getItem(\"CRYO_DEBUG\")?.includes(section)) {\n        return (msg: string, ...params: unknown[]) => {\n            const err = new Error();\n            const stack = err.stack?.split(\"\\n\");\n            const caller_line = stack?.[2] ?? \"unknown\";\n            const method_cleaned = caller_line.trim().replace(/^at\\s+/, \"\");\n            const method = method_cleaned.substring(0, method_cleaned.indexOf(\"(\") - 1);\n            const position = method_cleaned.substring(method_cleaned.lastIndexOf(\":\") - 2, method_cleaned.length - 1);\n\n            console.info(`${section.padEnd(24, \" \")}${new Date().toISOString().padEnd(32, \" \")} ${method.padEnd(64, \" \")} ${position.padEnd(8, \" \")} ${msg}`, ...params)\n        }\n    }\n\n    return () => {\n    };\n}\n", "class GuardError extends Error {\n\tconstructor(pMessage: string) {\n\t\tsuper(pMessage);\n\t\tObject.setPrototypeOf(this, GuardError.prototype);\n\t}\n}\n\n/*\n* Helferklasse mit statischen Funktionen zum \"undefined\" und \"null\"-checken, im Wesentlichen fancy asserts und casts.\n* */\nexport default class Guard {\n\t//wenn \"param\" === null, throw with \"message\"\n\tpublic static AgainstNull<T>(param: T, message?: string): asserts param is Exclude<T, null> {\n\t\tif (param === null)\n\t\t\tthrow new GuardError(message ? message : `Assertion failed, \"param\" (${param}) was null!`);\n\t}\n\n\t//Wenn \"param\" === \"undefined\", throw with \"message\"\n\tpublic static AgainstUndefined<T>(param: T, message?: string): asserts param is Exclude<T, undefined> {\n\t\tif (param === undefined)\n\t\t\tthrow new GuardError(message ? message : `Assertion failed, \"param\" (${param}) was undefined!`);\n\t}\n\n\t//Wenn \"param\" === \"null\" or \"param\" === \"undefined\", throw with \"message\"\n\tpublic static AgainstNullish<T>(param: T, message?: string): asserts param is Exclude<Exclude<T, null>, undefined> {\n\t\tGuard.AgainstUndefined(param, message);\n\t\tGuard.AgainstNull(param, message);\n\t}\n\n\t//Typ von \"param\" als Typ \"T\" interpretieren\n\tpublic static CastAs<T>(param: unknown): asserts param is T {\n\t\tGuard.AgainstNullish(param);\n\t}\n\n\t//Typ von \"param\" als Typ \"T\" interpretieren und \"param\" und \"expr\" gegen \"null\" und \"undefined\" guarden\n\tpublic static CastAssert<T>(param: unknown, expr: boolean, message?: string): asserts param is T {\n\t\tGuard.AgainstNullish(param, message);\n\t\tGuard.AgainstNullish(expr, message);\n\t\tif(!expr)\n\t\t\tthrow new GuardError(`Parameter assertion failed in CastAssert!`);\n\t}\n}\n", "import Guard from \"../Util/Guard.js\";\n\nexport class CryoEventEmitter<EventMap extends Record<string, any> = Record<string, any>> {\n    private target = new EventTarget();\n\n    public on<K extends keyof EventMap>(type: K, listener: (payload: EventMap[K]) => void) {\n        Guard.CastAs<string>(type);\n        this.target.addEventListener(type, (e: Event) => {\n            listener((e as CustomEvent).detail);\n        })\n    }\n\n    public emit<K extends keyof EventMap>(type: K, payload: EventMap[K]) {\n        Guard.CastAs<string>(type);\n        this.target.dispatchEvent(new CustomEvent(type, {detail: payload}));\n    }\n}\n", "import {ICryoClientWebsocketSessionEvents, PendingBinaryMessage} from \"./types/CryoClientWebsocketSession.js\";\nimport {AckTracker} from \"../Common/AckTracker/AckTracker.js\";\nimport CryoBinaryMessageFormatterFactory, {\n    BinaryMessageType\n} from \"../Common/CryoBinaryMessage/CryoBinaryMessageFormatterFactory.js\";\nimport {CryoFrameInspector} from \"../Common/CryoFrameInspector/CryoFrameInspector.js\";\n\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\nimport {CreateDebugLogger, DebugLoggerFunction} from \"../Common/Util/CreateDebugLogger.js\";\nimport {CryoBuffer} from \"../Common/CryoBuffer/CryoBuffer.js\";\nimport {CryoEventEmitter} from \"../Common/CryoEventEmitter/CryoEventEmitter.js\";\n\n/*\n* Cryo Websocket session layer. Handles Binary formatting and ACKs and whatnot\n* */\nexport class CryoClientWebsocketSession extends CryoEventEmitter<ICryoClientWebsocketSessionEvents> implements CryoClientWebsocketSession {\n    private messages_pending_server_ack = new Map<number, PendingBinaryMessage>();\n    private server_ack_tracker: AckTracker = new AckTracker();\n    private current_ack = 0;\n\n    /*\n    * Handle an outgoing binary message\n    * */\n    private HandleOutgoingBinaryMessage(message: CryoBuffer): void {\n        //Create a pending message with a new ack number and queue it for acknowledgement by the server\n        const message_ack = CryoBinaryMessageFormatterFactory.GetAck(message);\n        this.server_ack_tracker.Track(message_ack, {\n            timestamp: Date.now(),\n            message\n        });\n\n        //Send the message buffer to the server\n        if (!this.socket)\n            return;\n\n        this.socket.send(message.buffer);\n\n        this.log(`Sent ${CryoFrameInspector.Inspect(message)} to server.`);\n    }\n\n    /*\n    * Respond to PONG frames with PING and vice versa\n    * */\n    private HandlePingPongMessage(message: CryoBuffer): void {\n        const pingFormatter = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ping_pong\");\n\n        const decodedPingPongMessage = pingFormatter\n            .Deserialize(message);\n\n        const ping_pongMessage = pingFormatter\n            .Serialize(this.sid, decodedPingPongMessage.ack, decodedPingPongMessage.payload === \"pong\" ? \"ping\" : \"pong\");\n\n        this.HandleOutgoingBinaryMessage(ping_pongMessage);\n    }\n\n    /*\n    * Handling of binary error messages from the server, currently just log it\n    * */\n    private HandleErrorMessage(message: CryoBuffer): void {\n        const decodedErrorMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"error\")\n            .Deserialize(message);\n\n        this.log(decodedErrorMessage.payload);\n    }\n\n    /*\n    * Locally ACK the pending message if it matches the server's ACK\n    * */\n    private async HandleAckMessage(message: CryoBuffer): Promise<void> {\n        const decodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Deserialize(message);\n\n        const ack_id = decodedAckMessage.ack;\n        const found_message = this.server_ack_tracker.Confirm(ack_id);\n\n        if (!found_message) {\n            this.log(`Got unknown ack_id ${ack_id} from server.`);\n            return;\n        }\n\n        this.messages_pending_server_ack.delete(ack_id);\n\n        this.log(`Got ACK ${ack_id} from server.`);\n    }\n\n    /*\n    * Extract payload from the binary message and emit the message event with the utf8 payload\n    * */\n    private HandleUTF8DataMessage(message: CryoBuffer): void {\n        const decodedDataMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"utf8data\")\n            .Deserialize(message);\n\n        const payload = decodedDataMessage.payload;\n        const sender_sid = decodedDataMessage.sid;\n\n        const encodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Serialize(this.sid, decodedDataMessage.ack);\n\n        this.HandleOutgoingBinaryMessage(encodedAckMessage);\n\n/*\n        if (sender_sid !== this.sid)\n*/\n            this.emit(\"message-utf8\", payload);\n/*\n        else\n            this.log(\"Dropped self-originated DATA message\")\n*/\n    }\n\n    /*\n    * Extract payload from the binary message and emit the message event with the binary payload\n    * */\n    private HandleBinaryDataMessage(message: CryoBuffer): void {\n        const decodedDataMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"binarydata\")\n            .Deserialize(message);\n\n        const payload = decodedDataMessage.payload;\n        const sender_sid = decodedDataMessage.sid;\n\n        const encodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Serialize(this.sid, decodedDataMessage.ack);\n\n        this.HandleOutgoingBinaryMessage(encodedAckMessage);\n\n/*\n        if (sender_sid !== this.sid)\n*/\n            this.emit(\"message-binary\", payload);\n/*\n        else\n            this.log(\"Dropped self-originated DATA message\")\n*/\n    }\n\n    /*\n    * Handle incoming binary messages\n    * */\n    private async HandleIncomingBinaryMessage(message: CryoBuffer): Promise<void> {\n        const message_type = CryoBinaryMessageFormatterFactory.GetType(message);\n        this.log(`Received ${CryoFrameInspector.Inspect(message)} from server.`);\n\n        switch (message_type) {\n            case BinaryMessageType.PING_PONG:\n                this.HandlePingPongMessage(message);\n                return;\n            case BinaryMessageType.ERROR:\n                this.HandleErrorMessage(message);\n                return;\n            case BinaryMessageType.ACK:\n                await this.HandleAckMessage(message);\n                return;\n            case BinaryMessageType.UTF8DATA:\n                this.HandleUTF8DataMessage(message);\n                return;\n            case BinaryMessageType.BINARYDATA:\n                this.HandleBinaryDataMessage(message);\n                return;\n            default:\n                throw new Error(`Handle binary message type ${message_type}!`);\n        }\n    }\n\n    private async HandleError(err: Error) {\n        this.log(`${err.name} Exception in CryoSocket: ${err.message}`);\n        this.socket.close(1000, `CryoSocket ${this.sid} was closed due to an error.`);\n    }\n\n    private TranslateCloseCode(code: number): string {\n        switch (code) {\n            case 1000:\n                return \"Connection closed normally.\";\n            case 1006:\n                return \"Connection closed abnormally.\"\n            default:\n                return \"Unspecified cause for connection closure.\"\n        }\n    }\n\n    private async HandleClose(code: number, reason: CryoBuffer) {\n        this.log(`CryoSocket was closed, code '${code}' (${this.TranslateCloseCode(code)}), reason '${reason.toString(\"utf8\")}' .`);\n\n        if (code !== 1000) {\n            let current_attempt = 0;\n            //If the connection was not normally closed, try to reconnect\n            this.log(`Abnormal termination of Websocket connection, attempting to reconnect...`);\n            ///@ts-expect-error\n            this.socket = null;\n\n            this.emit(\"disconnected\", undefined);\n            while (current_attempt < 5) {\n                try {\n                    this.socket = await CryoClientWebsocketSession.ConstructSocket(this.host, this.timeout, this.bearer, this.sid);\n                    this.AttachListenersToSocket(this.socket);\n\n                    this.emit(\"reconnected\", undefined);\n                    return;\n                } catch (ex) {\n                    if (ex instanceof Error) {\n                        ///@ts-expect-error\n                        const errorCode = ex.cause?.error?.code as string;\n                        console.warn(`Unable to reconnect to '${this.host}'. Error code: '${errorCode}'. Retry attempt ${++current_attempt} / 5 ...`);\n                        await new Promise((resolve) => setTimeout(resolve, 5000));\n                    }\n                }\n            }\n\n            return;\n        }\n\n        if (this.socket)\n            this.socket.close();\n\n        this.emit(\"closed\", [code, reason.toString(\"utf8\")]);\n    }\n\n    private constructor(private host: string, private sid: UUID, private socket: WebSocket, private timeout: number, private bearer: string, private log: DebugLoggerFunction = CreateDebugLogger(\"CRYO_CLIENT_SESSION\")) {\n        super();\n\n        this.AttachListenersToSocket(socket);\n\n        setTimeout(() => this.emit(\"connected\", undefined), 0);\n    }\n\n    private AttachListenersToSocket(socket: WebSocket) {\n        socket.addEventListener(\"message\", async (message_event: MessageEvent) => {\n            const raw_data = message_event.data;\n\n            if (raw_data instanceof ArrayBuffer) {\n                await this.HandleIncomingBinaryMessage(new CryoBuffer(new Uint8Array(raw_data)));\n            } else {\n                this.log(\"Received text message instead of binary!\");\n            }\n        });\n\n        socket.addEventListener(\"error\", async (error_event) => {\n            await this.HandleError(new Error(\"Unspecified WebSocket error!\"));\n        });\n\n        socket.addEventListener(\"close\", async (close_event) => {\n            await this.HandleClose(close_event.code, new CryoBuffer((new TextEncoder().encode(close_event.reason))));\n        });\n    }\n\n    private static async ConstructSocket(host: string, timeout: number, bearer: string, sid: string): Promise<WebSocket> {\n        const full_host_url = new URL(host);\n        full_host_url.searchParams.set(\"authorization\", `Bearer ${bearer}`);\n        full_host_url.searchParams.set(\"x-cryo-sid\", sid);\n        const sck = new WebSocket(full_host_url);\n        sck.binaryType = \"arraybuffer\";\n\n        return new Promise<WebSocket>((resolve, reject) => {\n            setTimeout(() => {\n                if (sck.readyState !== WebSocket.OPEN)\n                    reject(new Error(`Connection timeout of ${timeout} ms reached!`));\n            }, timeout)\n            sck.addEventListener(\"open\", () => {\n                /*\n                                sck.(\"error\");\n                */\n                resolve(sck);\n            })\n            sck.addEventListener(\"error\", (err) => {\n                reject(new Error(`Error during session initialisation!`, {cause: err}));\n            });\n        })\n    }\n\n    public static async Connect(host: string, bearer: string, timeout: number = 5000): Promise<CryoClientWebsocketSession> {\n        const sid: UUID = crypto.randomUUID();\n\n        const socket = await CryoClientWebsocketSession.ConstructSocket(host, timeout, bearer, sid);\n        return new CryoClientWebsocketSession(host, sid, socket, timeout, bearer);\n    }\n\n    /*\n    * Send an utf8 message to the server\n    * */\n    public SendUTF8(message: string): void {\n        const new_ack_id = this.current_ack++;\n\n        const formatted_message = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"utf8data\")\n            .Serialize(this.sid, new_ack_id, message);\n\n        this.HandleOutgoingBinaryMessage(formatted_message);\n    }\n\n    /*\n    * Send a binary message to the server\n    * */\n    public SendBinary(message: CryoBuffer): void {\n        const new_ack_id = this.current_ack++;\n\n        const formatted_message = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"binarydata\")\n            .Serialize(this.sid, new_ack_id, message);\n\n        this.HandleOutgoingBinaryMessage(formatted_message);\n    }\n\n    public get session_id(): UUID {\n        return this.sid;\n    }\n\n    public Destroy() {\n        this.socket.close();\n    }\n}\n"],
  "mappings": "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",
  "names": ["CryoBuffer"]
}
