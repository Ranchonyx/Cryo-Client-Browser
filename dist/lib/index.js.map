{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/Common/AckTracker/AckTracker.ts", "../../src/Common/CryoBuffer/CryoBuffer.ts", "../../src/Common/CryoBinaryMessage/CryoBinaryMessageFormatterFactory.ts", "../../src/Common/CryoFrameInspector/CryoFrameInspector.ts", "../../src/Common/Util/CreateDebugLogger.ts", "../../src/Common/Util/Guard.ts", "../../src/Common/CryoEventEmitter/CryoEventEmitter.ts", "../../src/CryoClientWebsocketSession/CryoClientWebsocketSession.ts"],
  "sourcesContent": ["import {CryoClientWebsocketSession} from \"./CryoClientWebsocketSession/CryoClientWebsocketSession.js\";\n\n/**\n * Create a Cryo client and connect it to a Cryo server\n * @param host - Where the Cryo server is located\n * @param bearer - Your Cryo authentication token\n * @param timeout - How long to wait until disconnecting\n * */\nexport async function cryo(host: string, bearer: string, timeout: number = 5000) {\n    return CryoClientWebsocketSession.Connect(host, bearer, timeout)\n}\n", "import {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\ntype PendingBinaryMessage = {\n    timestamp: number;\n    message: CryoBuffer;\n    payload?: string | CryoBuffer;\n}\n\nexport class AckTracker {\n    private pending = new Map<number, PendingBinaryMessage>();\n\n    public Track(ack: number, message: PendingBinaryMessage) {\n        this.pending.set(ack, message);\n    }\n\n    public Confirm(ack: number): PendingBinaryMessage | null {\n        const maybe_ack = this.pending.get(ack);\n        if (!maybe_ack)\n            return null;\n\n        this.pending.delete(ack);\n        return maybe_ack;\n    }\n\n    public Has(ack: number): boolean {\n        return this.pending.has(ack);\n    }\n}\n", "export class CryoBuffer {\n    private view: DataView;\n\n    public constructor(public buffer: Uint8Array) {\n        this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n\n    public static alloc(length: number): CryoBuffer {\n        return new CryoBuffer(new Uint8Array(length));\n    }\n\n    public static from(input: string, encoding: \"utf8\" | \"hex\"): CryoBuffer {\n        if (encoding === \"utf8\")\n            return new CryoBuffer(new TextEncoder().encode(input));\n\n        const data = new Uint8Array(input.length / 2);\n        for (let i = 0; i < data.length; i++)\n            data[i] = parseInt(input.substring(i * 2, i * 2 + 16), 16);\n\n        return new CryoBuffer(data);\n    }\n\n    public writeUInt32BE(value: number, offset: number): void {\n        this.view.setUint32(offset, value);\n    }\n\n    public writeUInt8(value: number, offset: number): void {\n        this.view.setInt8(offset, value);\n    }\n\n    public readUInt32BE(offset: number): number {\n        return this.view.getUint32(offset);\n    }\n\n    public readUInt8(offset: number): number {\n        return this.view.getUint8(offset);\n    }\n\n    public write(text: string, offset: number = 0): void {\n        this.buffer.set(new TextEncoder().encode(text), offset);\n    }\n\n    public set(buffer: CryoBuffer, offset: number): void {\n        this.buffer.set(buffer.buffer, offset);\n    }\n\n    public toString(encoding: \"utf8\" | \"hex\"): string {\n        if (encoding === \"utf8\")\n            return new TextDecoder().decode(this.buffer);\n\n        return [...this.buffer]\n            .map(byte => byte.toString(16).padStart(2, \"0\"))\n            .join(\"\");\n    }\n\n    public subarray(start: number, end?: number):  CryoBuffer {\n        return new CryoBuffer(this.buffer.subarray(start, end));\n    }\n\n    public copy(target: CryoBuffer, target_start = 0): void {\n        target.buffer.set(this.buffer, target_start);\n    }\n\n    public get length(): number {\n        return this.buffer.byteLength;\n    }\n}\n", "import {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\nexport enum BinaryMessageType {\n    UTF8DATA,\n    ACK,\n    PING_PONG,\n    ERROR,\n    BINARYDATA\n}\n\ntype BinaryMessage<T, U extends BinaryMessageType> = {\n    sid: UUID;\n    type: U;\n} & T;\n\ntype AckMessage = BinaryMessage<{\n    ack: number;\n}, BinaryMessageType.ACK>;\n\ntype PingMessage = BinaryMessage<{\n    ack: number;\n    payload: \"ping\" | \"pong\";\n}, BinaryMessageType.PING_PONG>;\n\ntype UTF8DataMessage = BinaryMessage<{\n    ack: number;\n    payload: string;\n}, BinaryMessageType.UTF8DATA>;\n\ntype BinaryDataMessage = BinaryMessage<{\n    ack: number;\n    payload: CryoBuffer;\n}, BinaryMessageType.BINARYDATA>;\n\ntype ErrorMessage = BinaryMessage<{\n    ack: number;\n    payload: \"invalid_operation\" | \"session_expired\" | \"error\";\n}, BinaryMessageType.ERROR>;\n\ntype CryoAllBinaryMessage = AckMessage | PingMessage | UTF8DataMessage | ErrorMessage | BinaryDataMessage;\n\ninterface CryoBinaryMessageFormatter<T extends CryoAllBinaryMessage> {\n    Deserialize(value: CryoBuffer): T;\n\n    Serialize(sid: UUID, ack: number, payload: string | CryoBuffer | null): CryoBuffer;\n}\n\nclass CryoBufferUtil {\n    public static sidFromCryoBuffer(CryoBuffer: CryoBuffer): UUID {\n        const uuidv4_p1 = CryoBuffer.subarray(0, 4).toString(\"hex\");\n        const uuidv4_p2 = CryoBuffer.subarray(4, 6).toString(\"hex\");\n        const uuidv4_p3 = CryoBuffer.subarray(6, 8).toString(\"hex\");\n        const uuidv4_p4 = CryoBuffer.subarray(8, 10).toString(\"hex\");\n        const uuidv4_p5 = CryoBuffer.subarray(10, 16).toString(\"hex\");\n\n        return [uuidv4_p1, uuidv4_p2, uuidv4_p3, uuidv4_p4, uuidv4_p5].join(\"-\") as UUID;\n    }\n\n    public static sidToCryoBuffer(sid: UUID): CryoBuffer {\n        return CryoBuffer.from(sid.replaceAll(\"-\", \"\"), 'hex');\n    }\n}\n\nclass AckMessageFormatter implements CryoBinaryMessageFormatter<AckMessage> {\n    public Deserialize(value: CryoBuffer): AckMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        if (type !== BinaryMessageType.ACK)\n            throw new Error(\"Attempt to deserialize a non-ack binary message!\");\n\n        return {\n            sid,\n            ack,\n            type\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    public Serialize(sid: UUID, ack: number, payload: string | CryoBuffer | null = null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.ACK, 20);\n        return msg_buf;\n    }\n}\n\nclass PingPongMessageFormatter implements CryoBinaryMessageFormatter<PingMessage> {\n    public Deserialize(value: CryoBuffer): PingMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\");\n        if (type !== BinaryMessageType.PING_PONG)\n            throw new Error(\"Attempt to deserialize a non-ping_pong binary message!\");\n\n        if (!(payload === \"ping\" || payload === \"pong\"))\n            throw new Error(`Invalid payload ${payload} in ping_pong binary message!`);\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: \"ping\" | \"pong\"): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + 4);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.PING_PONG, 20);\n        msg_buf.write(payload, 21);\n\n        return msg_buf;\n    }\n}\n\nclass UTF8DataMessageFormatter implements CryoBinaryMessageFormatter<UTF8DataMessage> {\n    public Deserialize(value: CryoBuffer): UTF8DataMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\");\n\n        if (type !== BinaryMessageType.UTF8DATA)\n            throw new Error(\"Attempt to deserialize a non-data binary message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: string | null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + (payload?.length || 4));\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.UTF8DATA, 20);\n        msg_buf.write(payload || \"null\", 21);\n\n        return msg_buf;\n    }\n}\n\nclass BinaryDataMessageFormatter implements CryoBinaryMessageFormatter<BinaryDataMessage> {\n    public Deserialize(value: CryoBuffer): BinaryDataMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21);\n\n        if (type !== BinaryMessageType.BINARYDATA)\n            throw new Error(\"Attempt to deserialize a non-data binary message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: CryoBuffer | null): CryoBuffer {\n        const payload_length = payload ? payload.length : 4;\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + payload_length);\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.UTF8DATA, 20);\n        msg_buf.set(payload || CryoBuffer.from(\"null\", \"utf8\"), 21);\n\n        return msg_buf;\n    }\n}\n\nclass ErrorMessageFormatter implements CryoBinaryMessageFormatter<ErrorMessage> {\n    public Deserialize(value: CryoBuffer): ErrorMessage {\n        const sid = CryoBufferUtil.sidFromCryoBuffer(value);\n        const ack = value.readUInt32BE(16);\n        const type = value.readUInt8(20);\n        const payload = value.subarray(21).toString(\"utf8\") as ErrorMessage[\"payload\"];\n\n        if (type !== BinaryMessageType.ERROR)\n            throw new Error(\"Attempt to deserialize a non-error message!\");\n\n        return {\n            sid,\n            ack,\n            type,\n            payload\n        }\n    }\n\n    public Serialize(sid: UUID, ack: number, payload: ErrorMessage[\"payload\"] | null): CryoBuffer {\n        const msg_buf = CryoBuffer.alloc(16 + 4 + 1 + (payload?.length || 13));\n        const sid_buf = CryoBufferUtil.sidToCryoBuffer(sid);\n\n        sid_buf.copy(msg_buf, 0);\n        msg_buf.writeUInt32BE(ack, 16);\n        msg_buf.writeUInt8(BinaryMessageType.ERROR, 20);\n        msg_buf.write(payload || \"unknown_error\", 21);\n\n        return msg_buf;\n    }\n}\n\nexport default class CryoBinaryMessageFormatterFactory {\n    public static GetFormatter(type: \"utf8data\"): UTF8DataMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.UTF8DATA): UTF8DataMessageFormatter;\n\n    public static GetFormatter(type: \"ping_pong\"): PingPongMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.PING_PONG): PingPongMessageFormatter;\n\n    public static GetFormatter(type: \"ack\"): AckMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.ACK): AckMessageFormatter;\n\n    public static GetFormatter(type: \"error\"): ErrorMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.ERROR): ErrorMessageFormatter;\n\n    public static GetFormatter(type: \"binarydata\"): BinaryDataMessageFormatter;\n    public static GetFormatter(type: BinaryMessageType.BINARYDATA): BinaryDataMessageFormatter;\n\n    public static GetFormatter(type: \"utf8data\" | \"ping_pong\" | \"ack\" | \"error\" | \"binarydata\"): CryoBinaryMessageFormatter<any>;\n    public static GetFormatter(type: BinaryMessageType.UTF8DATA | BinaryMessageType.PING_PONG | BinaryMessageType.ACK | BinaryMessageType.ERROR | BinaryMessageType.BINARYDATA): CryoBinaryMessageFormatter<any>;\n    public static GetFormatter(type: string | BinaryMessageType): CryoBinaryMessageFormatter<CryoAllBinaryMessage> {\n        switch (type) {\n            case \"data\":\n            case BinaryMessageType.UTF8DATA:\n                return new UTF8DataMessageFormatter();\n            case \"error\":\n            case BinaryMessageType.ERROR:\n                return new ErrorMessageFormatter();\n            case \"ack\":\n            case BinaryMessageType.ACK:\n                return new AckMessageFormatter();\n            case \"ping_pong\":\n            case BinaryMessageType.PING_PONG:\n                return new PingPongMessageFormatter();\n            case \"binarydata\":\n            case BinaryMessageType.BINARYDATA:\n                return new BinaryDataMessageFormatter();\n            default:\n                throw new Error(`Binary message format for type '${type}' is not supported!`)\n        }\n    }\n\n    public static GetType(message: CryoBuffer): BinaryMessageType {\n        const type = message.readUInt8(20);\n        if (type > BinaryMessageType.ERROR)\n            throw new Error(`Unable to decode type from message ${message}. MAX_TYPE = 3, got ${type} !`);\n\n        return type;\n    }\n\n    public static GetAck(message: CryoBuffer): number {\n        return message.readUInt32BE(16);\n    }\n\n    public static GetSid(message: CryoBuffer): UUID {\n        return CryoBufferUtil.sidFromCryoBuffer(message);\n    }\n\n    public static GetPayload(message: CryoBuffer, encoding: \"utf8\" | \"hex\"): string {\n        return message.subarray(21).toString(encoding);\n    }\n}\n", "import CryoBinaryMessageFormatterFactory from \"../CryoBinaryMessage/CryoBinaryMessageFormatterFactory.js\";\nimport {CryoBuffer} from \"../CryoBuffer/CryoBuffer.js\";\n\nconst typeToStringMap = {\n    0: \"utf8data\",\n    1: \"ack\",\n    2: \"ping/pong\",\n    3: \"error\",\n    4: \"binarydata\"\n}\n\nexport class CryoFrameInspector {\n    public static Inspect(message: CryoBuffer, encoding: \"utf8\" | \"hex\" = \"utf8\"): string {\n        const sid = CryoBinaryMessageFormatterFactory.GetSid(message);\n        const ack = CryoBinaryMessageFormatterFactory.GetAck(message);\n        const type = CryoBinaryMessageFormatterFactory.GetType(message);\n        const type_str = typeToStringMap[type] || \"unknown\";\n\n        const payload = CryoBinaryMessageFormatterFactory.GetPayload(message, encoding);\n\n        return `[${sid},${ack},${type_str},[${payload}]]`\n    }\n}\n", "export type DebugLoggerFunction = (msg: string, ...params: unknown[]) => void;\n\nexport function CreateDebugLogger(section: string): DebugLoggerFunction {\n    if (localStorage.getItem(\"CRYO_DEBUG\")?.includes(section)) {\n        return (msg: string, ...params: unknown[]) => {\n            const err = new Error();\n            const stack = err.stack?.split(\"\\n\");\n            const caller_line = stack?.[2] ?? \"unknown\";\n            const method_cleaned = caller_line.trim().replace(/^at\\s+/, \"\");\n            const method = method_cleaned.substring(0, method_cleaned.indexOf(\"(\") - 1);\n            const position = method_cleaned.substring(method_cleaned.lastIndexOf(\":\") - 2, method_cleaned.length - 1);\n\n            console.info(`${section.padEnd(24, \" \")}${new Date().toISOString().padEnd(32, \" \")} ${method.padEnd(64, \" \")} ${position.padEnd(8, \" \")} ${msg}`, ...params)\n        }\n    }\n\n    return () => {\n    };\n}\n", "class GuardError extends Error {\n\tconstructor(pMessage: string) {\n\t\tsuper(pMessage);\n\t\tObject.setPrototypeOf(this, GuardError.prototype);\n\t}\n}\n\n/*\n* Helferklasse mit statischen Funktionen zum \"undefined\" und \"null\"-checken, im Wesentlichen fancy asserts und casts.\n* */\nexport default class Guard {\n\t//wenn \"param\" === null, throw with \"message\"\n\tpublic static AgainstNull<T>(param: T, message?: string): asserts param is Exclude<T, null> {\n\t\tif (param === null)\n\t\t\tthrow new GuardError(message ? message : `Assertion failed, \"param\" (${param}) was null!`);\n\t}\n\n\t//Wenn \"param\" === \"undefined\", throw with \"message\"\n\tpublic static AgainstUndefined<T>(param: T, message?: string): asserts param is Exclude<T, undefined> {\n\t\tif (param === undefined)\n\t\t\tthrow new GuardError(message ? message : `Assertion failed, \"param\" (${param}) was undefined!`);\n\t}\n\n\t//Wenn \"param\" === \"null\" or \"param\" === \"undefined\", throw with \"message\"\n\tpublic static AgainstNullish<T>(param: T, message?: string): asserts param is Exclude<Exclude<T, null>, undefined> {\n\t\tGuard.AgainstUndefined(param, message);\n\t\tGuard.AgainstNull(param, message);\n\t}\n\n\t//Typ von \"param\" als Typ \"T\" interpretieren\n\tpublic static CastAs<T>(param: unknown): asserts param is T {\n\t\tGuard.AgainstNullish(param);\n\t}\n\n\t//Typ von \"param\" als Typ \"T\" interpretieren und \"param\" und \"expr\" gegen \"null\" und \"undefined\" guarden\n\tpublic static CastAssert<T>(param: unknown, expr: boolean, message?: string): asserts param is T {\n\t\tGuard.AgainstNullish(param, message);\n\t\tGuard.AgainstNullish(expr, message);\n\t\tif(!expr)\n\t\t\tthrow new GuardError(`Parameter assertion failed in CastAssert!`);\n\t}\n}\n", "import Guard from \"../Util/Guard.js\";\n\nexport class CryoEventEmitter<EventMap extends Record<string, any> = Record<string, any>> {\n    private target = new EventTarget();\n\n    public on<K extends keyof EventMap>(type: K, listener: (payload: EventMap[K]) => void) {\n        Guard.CastAs<string>(type);\n        this.target.addEventListener(type, (e: Event) => {\n            listener((e as CustomEvent).detail);\n        })\n    }\n\n    public emit<K extends keyof EventMap>(type: K, payload: EventMap[K]) {\n        Guard.CastAs<string>(type);\n        this.target.dispatchEvent(new CustomEvent(type, {detail: payload}));\n    }\n}\n", "import {ICryoClientWebsocketSessionEvents, PendingBinaryMessage} from \"./types/CryoClientWebsocketSession.js\";\nimport {AckTracker} from \"../Common/AckTracker/AckTracker.js\";\nimport CryoBinaryMessageFormatterFactory, {\n    BinaryMessageType\n} from \"../Common/CryoBinaryMessage/CryoBinaryMessageFormatterFactory.js\";\nimport {CryoFrameInspector} from \"../Common/CryoFrameInspector/CryoFrameInspector.js\";\n\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\nimport {CreateDebugLogger, DebugLoggerFunction} from \"../Common/Util/CreateDebugLogger.js\";\nimport {CryoBuffer} from \"../Common/CryoBuffer/CryoBuffer.js\";\nimport {CryoEventEmitter} from \"../Common/CryoEventEmitter/CryoEventEmitter.js\";\n\n/*\n* Cryo Websocket session layer. Handles Binary formatting and ACKs and whatnot\n* */\nexport class CryoClientWebsocketSession extends CryoEventEmitter<ICryoClientWebsocketSessionEvents> implements CryoClientWebsocketSession {\n    private messages_pending_server_ack = new Map<number, PendingBinaryMessage>();\n    private server_ack_tracker: AckTracker = new AckTracker();\n    private current_ack = 0;\n\n    /*\n    * Handle an outgoing binary message\n    * */\n    private HandleOutgoingBinaryMessage(message: CryoBuffer): void {\n        //Create a pending message with a new ack number and queue it for acknowledgement by the server\n        const message_ack = CryoBinaryMessageFormatterFactory.GetAck(message);\n        this.server_ack_tracker.Track(message_ack, {\n            timestamp: Date.now(),\n            message\n        });\n\n        //Send the message buffer to the server\n        if (!this.socket)\n            return;\n\n        this.socket.send(message.buffer);\n\n        this.log(`Sent ${CryoFrameInspector.Inspect(message)} to server.`);\n    }\n\n    /*\n    * Respond to PONG frames with PING and vice versa\n    * */\n    private HandlePingPongMessage(message: CryoBuffer): void {\n        const pingFormatter = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ping_pong\");\n\n        const decodedPingPongMessage = pingFormatter\n            .Deserialize(message);\n\n        const ping_pongMessage = pingFormatter\n            .Serialize(this.sid, decodedPingPongMessage.ack, decodedPingPongMessage.payload === \"pong\" ? \"ping\" : \"pong\");\n\n        this.HandleOutgoingBinaryMessage(ping_pongMessage);\n    }\n\n    /*\n    * Handling of binary error messages from the server, currently just log it\n    * */\n    private HandleErrorMessage(message: CryoBuffer): void {\n        const decodedErrorMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"error\")\n            .Deserialize(message);\n\n        this.log(decodedErrorMessage.payload);\n    }\n\n    /*\n    * Locally ACK the pending message if it matches the server's ACK\n    * */\n    private async HandleAckMessage(message: CryoBuffer): Promise<void> {\n        const decodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Deserialize(message);\n\n        const ack_id = decodedAckMessage.ack;\n        const found_message = this.server_ack_tracker.Confirm(ack_id);\n\n        if (!found_message) {\n            this.log(`Got unknown ack_id ${ack_id} from server.`);\n            return;\n        }\n\n        this.messages_pending_server_ack.delete(ack_id);\n\n        this.log(`Got ACK ${ack_id} from server.`);\n    }\n\n    /*\n    * Extract payload from the binary message and emit the message event with the utf8 payload\n    * */\n    private HandleUTF8DataMessage(message: CryoBuffer): void {\n        const decodedDataMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"utf8data\")\n            .Deserialize(message);\n\n        const payload = decodedDataMessage.payload;\n        const sender_sid = decodedDataMessage.sid;\n\n        const encodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Serialize(this.sid, decodedDataMessage.ack);\n\n        this.HandleOutgoingBinaryMessage(encodedAckMessage);\n\n        if (sender_sid !== this.sid)\n            this.emit(\"message-utf8\", payload);\n        else\n            this.log(\"Dropped self-originated DATA message\")\n    }\n\n    /*\n    * Extract payload from the binary message and emit the message event with the utf8 payload\n    * */\n    private HandleBinaryDataMessage(message: CryoBuffer): void {\n        const decodedDataMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"binarydata\")\n            .Deserialize(message);\n\n        const payload = decodedDataMessage.payload;\n        const sender_sid = decodedDataMessage.sid;\n\n        const encodedAckMessage = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"ack\")\n            .Serialize(this.sid, decodedDataMessage.ack);\n\n        this.HandleOutgoingBinaryMessage(encodedAckMessage);\n\n        if (sender_sid !== this.sid)\n            this.emit(\"message-binary\", payload);\n        else\n            this.log(\"Dropped self-originated DATA message\")\n    }\n\n\n    /*\n    * Handle incoming binary messages\n    * */\n    private async HandleIncomingBinaryMessage(message: CryoBuffer): Promise<void> {\n        const message_type = CryoBinaryMessageFormatterFactory.GetType(message);\n        this.log(`Received ${CryoFrameInspector.Inspect(message)} from server.`);\n\n        switch (message_type) {\n            case BinaryMessageType.PING_PONG:\n                this.HandlePingPongMessage(message);\n                return;\n            case BinaryMessageType.ERROR:\n                this.HandleErrorMessage(message);\n                return;\n            case BinaryMessageType.ACK:\n                await this.HandleAckMessage(message);\n                return;\n            case BinaryMessageType.UTF8DATA:\n                this.HandleUTF8DataMessage(message);\n                return;\n            case BinaryMessageType.BINARYDATA:\n                this.HandleBinaryDataMessage(message);\n                return;\n            default:\n                throw new Error(`Handle binary message type ${message_type}!`);\n        }\n    }\n\n    private async HandleError(err: Error) {\n        this.log(`${err.name} Exception in CryoSocket: ${err.message}`);\n        this.socket.close(1000, `CryoSocket ${this.sid} was closed due to an error.`);\n    }\n\n    private TranslateCloseCode(code: number): string {\n        switch (code) {\n            case 1000:\n                return \"Connection closed normally.\";\n            case 1006:\n                return \"Connection closed abnormally.\"\n            default:\n                return \"Unspecified cause for connection closure.\"\n        }\n    }\n\n    private async HandleClose(code: number, reason: CryoBuffer) {\n        this.log(`CryoSocket was closed, code '${code}' (${this.TranslateCloseCode(code)}), reason '${reason.toString(\"utf8\")}' .`);\n\n        if (code !== 1000) {\n            let current_attempt = 0;\n            //If the connection was not normally closed, try to reconnect\n            this.log(`Abnormal termination of Websocket connection, attempting to reconnect...`);\n            ///@ts-expect-error\n            this.socket = null;\n\n            this.emit(\"disconnected\", undefined);\n            while (current_attempt < 5) {\n                try {\n                    this.socket = await CryoClientWebsocketSession.ConstructSocket(this.host, this.timeout, this.bearer, this.sid);\n                    this.AttachListenersToSocket(this.socket);\n\n                    this.emit(\"reconnected\", undefined);\n                    return;\n                } catch (ex) {\n                    if (ex instanceof Error) {\n                        ///@ts-expect-error\n                        const errorCode = ex.cause?.error?.code as string;\n                        console.warn(`Unable to reconnect to '${this.host}'. Error code: '${errorCode}'. Retry attempt ${++current_attempt} / 5 ...`);\n                        await new Promise((resolve) => setTimeout(resolve, 5000));\n                    }\n                }\n            }\n\n            return;\n        }\n\n        if (this.socket)\n            this.socket.close();\n\n        this.emit(\"closed\", [code, reason.toString(\"utf8\")]);\n    }\n\n    private constructor(private host: string, private sid: UUID, private socket: WebSocket, private timeout: number, private bearer: string, private log: DebugLoggerFunction = CreateDebugLogger(\"CRYO_CLIENT_SESSION\")) {\n        super();\n\n        this.AttachListenersToSocket(socket);\n\n        this.emit(\"connected\", undefined);\n    }\n\n    private AttachListenersToSocket(socket: WebSocket) {\n        socket.addEventListener(\"message\", async (message_event: MessageEvent) => {\n            const raw_data = message_event.data;\n\n            if (raw_data instanceof ArrayBuffer) {\n                await this.HandleIncomingBinaryMessage(new CryoBuffer(new Uint8Array(raw_data)));\n            } else {\n                this.log(\"Received text message instead of binary!\");\n            }\n        });\n\n        socket.addEventListener(\"error\", async (error_event) => {\n            await this.HandleError(new Error(\"Unspecified WebSocket error!\"));\n        });\n\n        socket.addEventListener(\"close\", async (close_event) => {\n            await this.HandleClose(close_event.code, new CryoBuffer((new TextEncoder().encode(close_event.reason))));\n        });\n    }\n\n    private static async ConstructSocket(host: string, timeout: number, bearer: string, sid: string): Promise<WebSocket> {\n        const full_host_url = new URL(host);\n        full_host_url.searchParams.set(\"authorization\", `Bearer ${bearer}`);\n        full_host_url.searchParams.set(\"x-cryo-sid\", sid);\n        const sck = new WebSocket(host);\n        sck.binaryType = \"arraybuffer\";\n\n        return new Promise<WebSocket>((resolve, reject) => {\n            setTimeout(() => {\n                if (sck.readyState !== WebSocket.OPEN)\n                    reject(new Error(`Connection timeout of ${timeout} ms reached!`));\n            }, timeout)\n            sck.addEventListener(\"open\", () => {\n                /*\n                                sck.(\"error\");\n                */\n                resolve(sck);\n            })\n            sck.addEventListener(\"error\", (err) => {\n                reject(new Error(`Error during session initialisation!`, {cause: err}));\n            });\n        })\n    }\n\n    public static async Connect(host: string, bearer: string, timeout: number = 5000): Promise<CryoClientWebsocketSession> {\n        const sid: UUID = crypto.randomUUID();\n\n        const socket = await CryoClientWebsocketSession.ConstructSocket(host, timeout, bearer, sid);\n        return new CryoClientWebsocketSession(host, sid, socket, timeout, bearer);\n    }\n\n    /*\n    * Send an utf8 message to the server\n    * */\n    public SendUTF8(message: string): void {\n        const new_ack_id = this.current_ack++;\n\n        const formatted_message = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"utf8data\")\n            .Serialize(this.sid, new_ack_id, message);\n\n        this.HandleOutgoingBinaryMessage(formatted_message);\n    }\n\n    /*\n    * Send a binary message to the server\n    * */\n    public SendBinary(message: CryoBuffer): void {\n        const new_ack_id = this.current_ack++;\n\n        const formatted_message = CryoBinaryMessageFormatterFactory\n            .GetFormatter(\"binarydata\")\n            .Serialize(this.sid, new_ack_id, message);\n\n        this.HandleOutgoingBinaryMessage(formatted_message);\n    }\n\n    public get session_id(): UUID {\n        return this.sid;\n    }\n\n    public Destroy() {\n        this.socket.close();\n    }\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "cryo", "AckTracker", "ack", "message", "maybe_ack", "CryoBuffer", "_CryoBuffer", "buffer", "length", "input", "encoding", "data", "i", "value", "offset", "text", "byte", "start", "end", "target", "target_start", "CryoBufferUtil", "CryoBuffer", "uuidv4_p1", "uuidv4_p2", "uuidv4_p3", "uuidv4_p4", "uuidv4_p5", "sid", "AckMessageFormatter", "value", "ack", "type", "payload", "msg_buf", "PingPongMessageFormatter", "UTF8DataMessageFormatter", "BinaryDataMessageFormatter", "payload_length", "ErrorMessageFormatter", "CryoBinaryMessageFormatterFactory", "message", "encoding", "typeToStringMap", "CryoFrameInspector", "message", "encoding", "sid", "CryoBinaryMessageFormatterFactory", "ack", "type", "type_str", "payload", "CreateDebugLogger", "section", "msg", "params", "method_cleaned", "method", "position", "GuardError", "_GuardError", "pMessage", "Guard", "_Guard", "param", "message", "expr", "CryoEventEmitter", "type", "listener", "Guard", "e", "payload", "CryoClientWebsocketSession", "_CryoClientWebsocketSession", "CryoEventEmitter", "host", "sid", "socket", "timeout", "bearer", "log", "CreateDebugLogger", "AckTracker", "message", "message_ack", "CryoBinaryMessageFormatterFactory", "CryoFrameInspector", "pingFormatter", "decodedPingPongMessage", "ping_pongMessage", "decodedErrorMessage", "ack_id", "decodedDataMessage", "payload", "sender_sid", "encodedAckMessage", "message_type", "err", "code", "reason", "current_attempt", "ex", "errorCode", "resolve", "message_event", "raw_data", "CryoBuffer", "error_event", "close_event", "full_host_url", "sck", "reject", "new_ack_id", "formatted_message", "cryo", "host", "bearer", "timeout", "CryoClientWebsocketSession"]
}
